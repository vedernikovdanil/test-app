@use "sass:map";
@use "./functions.scss" as *;
@use "./variables.scss" as *;

:root {
  @each $name, $color in $theme-colors {
    @include lch-palette-init(--#{$name}, $color...);
  }

  @extend %bg-light;

  @include lch-palette-init(--link-clr, $l: 55%, $c: 50%, $h: 250deg, $mul: 2);
}

@mixin set-properties($property, $values) {
  @each $value in $values {
    &-#{$value} {
      #{$property}: $value !important;
    }
  }
}

@include describe("display") {
  @each $value in (none, block, flex, grid) {
    .d-#{$value} {
      display: $value !important;
    }

    @if $value != none {
      .d-inline-#{$value} {
        display: inline-#{$value} !important;
      }
    }
  }
}

@include describe("flex") {
  .flex {
    &-column {
      flex-direction: column !important;
    }

    &-wrap {
      flex-wrap: wrap !important;
    }

    &-column-reverse {
      flex-direction: column-reverse !important;
    }

    &-wrap-reverse {
      flex-wrap: wrap-reverse !important;
    }
  }

  @each $property in (align-items, justify-content) {
    .#{$property} {
      $values: if(
        $property == justify-content,
        (space-between, space-around, space-evenly),
        (stretch, baseline)
      );

      @include set-properties($property, (center, start, end));
      @include set-properties($property, $values);
    }
  }
}

@include describe("gap") {
  @each $space_class, $space in $spacers {
    .gap-#{$space_class} {
      gap: $space !important;
    }
  }
}

@include describe("width/height") {
  @each $class, $prop in (w: width, h: height) {
    .#{$class}-fit {
      #{$prop}: fit-content !important;
    }

    @each $space_class, $space in $percents {
      .#{$class}-#{$space_class} {
        #{$prop}: $space !important;
      }
    }
  }
}

@include describe("margin/padding") {
  @each $space_class, $space in $spacers {
    @each $class, $prop in (m: margin, p: padding) {
      .#{$class} {
        &-#{$space_class} {
          #{$prop}: $space !important;
        }

        &x-#{$space_class} {
          #{$prop}-left: $space !important;
          #{$prop}-right: $space !important;
        }

        &y-#{$space_class} {
          #{$prop}-top: $space !important;
          #{$prop}-bottom: $space !important;
        }

        @each $side_class, $side in (l: left, r: right, t: top, b: bottom) {
          &#{$side_class}-#{$space_class} {
            #{$prop}-#{$side}: $space !important;
          }
        }
      }
    }
  }
}

.container {
  margin: auto;
  padding: 0 3rem;

  @media ($media-breakpoint) {
    padding: 0 1rem;
  }

  @media (width >= 1200px) {
    max-width: 1200px;
  }
}

@each $color_name, $color in $theme-colors {
  .bg-#{$color_name},
  %bg-#{$color_name} {
    $text: if(map.get($color, l) <= 65%, --light, --dark);

    @include palette_replace(--text-clr, $text);
    @include palette_replace(--bg-clr, --#{$color-name});

    background-color: var(--#{$color_name});
  }
}

@mixin transition-base {
  transition-timing-function: ease;
  transition-duration: 350ms;
}

%emoji {
  margin: 0;
  padding: 0;
  vertical-align: middle;

  &::before {
    cursor: pointer;
    content: var(--emoji, "ðŸ˜€");

    display: block;

    font-size: 2rem;
    line-height: 1;
  }
}
